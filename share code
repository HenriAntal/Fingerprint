  public static boolean[] getNeighbours(boolean[][] image, int row, int col) {
	  assert (image != null); // special case that is not expected (the image is supposed to have been checked
                              // earlier)	
      boolean p0=false,p1=false,p2=false,p3=false,p4=false,p5=false,p6=false,p7=false;
      boolean truth[] = {p0,p1,p2,p3,p4,p5,p6,p7};
      
      if((image[0].length < 2)&&(image.length < 2)) { 	// 1 by 1 block
    	  return truth;
      }
      if((image.length < 2)) {		//only 1 row
    	  p2 = image [row][col+1];
    	  
      } else if (image[0].length < 2){
    	  p4 = image [row+1][col];
      }else {
      
          if ((row == 0)&&(col == 0)){  //left upper corner 
              p2 = image [row][col+1];  p3 = image [row+1][col+1];  p4 = image [row+1][col];
          }

          if((row== 0)&& (col == image [0].length-1)){    //right upper corner
              p4 = image [row+1][col];  p5 = image [row+1][col-1];  p6 = image [row][col-1];
          }

      if((row== image.length-1)&& (col == 0)){    //left lower corner
          p0 = image [row-1][col];  p1 = image [row-1][col+1];  p2 = image [row][col+1];
      }
      if((row== image.length-1)&& (col == image[0].length-1)){    //right lower corner
          p0 = image [row-1][col];  p6 = image [row][col-1]; p7 = image [row-1][col-1];
      }


      if((row == 0)&&(col!=0)&&(col!=image[0].length-1)){      //top edge without corners
          p2 = image [row][col+1];  p3 = image [row+1][col+1];  p4 = image [row+1][col]; p5 = image [row+1][col-1]; p6 = image [row][col-1];
      }
      if((row == image.length-1)&&(col!=0)&&(col!=image[0].length-1)){      //bottom edge without corners
          p0 = image [row-1][col];  p1 = image [row-1][col+1];  p2 = image [row][col+1];   p6 = image [row][col-1]; p7 = image [row-1][col-1];
      }
      if((row != 0) && (col==0) && (row != image.length-1)){      //left edge without corners
          p0 = image [row-1][col];  p1 = image [row-1][col+1];  p2 = image [row][col+1];  p3 = image [row+1][col+1];  p4 = image [row+1][col];
      }
      if((row != 0) && (col==image[0].length-1) && (row != image.length-1)){      //right edge without corners
          p0 = image [row-1][col];  p4 = image [row+1][col];  p5 = image [row+1][col-1];    p6 = image [row][col-1];    p7 = image [row-1][col-1];
      }


      if((row != 0)&&(row != image.length-1)&&(col != 0)&&(col!= image[0].length-1)) { // the usual case no border at all
          p0 = image[row - 1][col]; p1 = image[row - 1][col + 1];   p2 = image[row][col + 1];   p3 = image[row + 1][col + 1];
          p4 = image[row + 1][col];  p5 = image[row + 1][col - 1];  p6 = image[row][col - 1];   p7 = image[row - 1][col - 1];
      }
      }

      boolean [] truth2 = {p0,p1,p2,p3,p4,p5,p6,p7}; // table with all neighbours truths values


	  return truth2;
  }
